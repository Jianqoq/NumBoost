from typing import Any

from numpy import ndarray


class Tensor:
    axis: int
    base: Any
    data: ndarray
    depth: int
    dim: int
    grad: str
    grad_fn: Any
    graph: Any
    has_conv: int
    require_grad: bool
    x: Tensor
    y: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def backward(self, grad: Tensor|ndarray) -> None: ...
    def __abs__(self) -> Tensor: ...
    def __add__(self, other) -> Tensor: ...
    def __and__(self, other) -> Tensor: ...
    def __divmod__(self, other) -> Any: ...
    def __float__(self) -> float: ...
    def __floordiv__(self, other) -> Tensor: ...
    def __iadd__(self, other) -> Tensor: ...
    def __iand__(self, other) -> Tensor: ...
    def __ifloordiv__(self, other) -> Tensor: ...
    def __ilshift__(self, other) -> Tensor: ...
    def __imatmul__(self, *args, **kwargs) -> Tensor: ...
    def __imod__(self, other) -> Tensor: ...
    def __imul__(self, other) -> Tensor: ...
    def __int__(self) -> int: ...
    def __invert__(self) -> Tensor: ...
    def __ior__(self, other) -> Any: ...
    def __ipow__(self, other) -> Any: ...
    def __irshift__(self, other) -> Any: ...
    def __isub__(self, other) -> Any: ...
    def __itruediv__(self, other) -> Any: ...
    def __ixor__(self, other) -> Any: ...
    def __lshift__(self, other) -> Tensor: ...
    def __matmul__(self, *args, **kwargs) -> Tensor: ...
    def __mod__(self, other) -> Any: ...
    def __mul__(self, other) -> Tensor: ...
    def __neg__(self) -> Tensor: ...
    def __or__(self, other) -> Tensor: ...
    def __pos__(self) -> Tensor: ...
    def __pow__(self, other) -> Tensor: ...
    def __radd__(self, other) -> Tensor: ...
    def __rand__(self, other) -> Tensor: ...
    def __rdivmod__(self, other) -> Tensor: ...
    def __rfloordiv__(self, other) -> Tensor: ...
    def __rlshift__(self, other) -> Tensor: ...
    def __rmatmul__(self, *args, **kwargs) -> Tensor: ...
    def __rmod__(self, other) -> Tensor: ...
    def __rmul__(self, other) -> Tensor: ...
    def __ror__(self, other) -> Tensor: ...
    def __rpow__(self, other) -> Tensor: ...
    def __rrshift__(self, other) -> Tensor: ...
    def __rshift__(self, other) -> Tensor: ...
    def __rsub__(self, other) -> Tensor: ...
    def __rtruediv__(self, other) -> Tensor: ...
    def __rxor__(self, other) -> Tensor: ...
    def __sub__(self, other) -> Tensor: ...
    def __truediv__(self, other) -> Tensor: ...
    def __xor__(self, other) -> Tensor: ...
